"use strict";(self.webpackChunkhydrolang_training=self.webpackChunkhydrolang_training||[]).push([[206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,f=d["".concat(u,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i=n.p+"assets/images/hydrocompute-arch-0b84c05650b85f26f1082877a519621f.png",a={sidebar_position:2},s="Introduction",u={unversionedId:"intro",id:"intro",title:"Introduction",description:"Overview",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/tutorials/hydrocompute/docs/intro",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"About this lesson",permalink:"/tutorials/hydrocompute/docs/about"},next:{title:"Getting Started",permalink:"/tutorials/hydrocompute/docs/getting_started"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Open-source Nature",id:"open-source-nature",level:2}],d={toc:l},p="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"HydroCompute is a computational library developed using different web technologies that can be effectively used in web applications through multithreading technology. This is achieved through the implementation of various paradigms and software ontologies that enable fast and easy deployment of code and its relationship with data and data manipulation."),(0,o.kt)("p",null,"It has been designed with the following structure:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Connection layer: used as the main interface that interacts with the user for running an instance of the library, manipulating and serving data, and saving results."),(0,o.kt)("li",{parentName:"ul"},"Engine layer: it serves as the fundamental driver for creating schedules based on dependencies, running a simulation, and returning results."),(0,o.kt)("li",{parentName:"ul"},"Thread engine: used as a thread manager that runs based on the requirements of the user, including data and functions to run."),(0,o.kt)("li",{parentName:"ul"},"Scheduler: graph-based scheduling through dependency acyclic behavior.")),(0,o.kt)("p",null,"The code has been developed considering an open-source, open-ended ontology in which the user can modify the framework based on the end-use case required. This means that the user is able to port different type of coding structures into the engine following the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/uihilab/HydroCompute/tree/master/src/javascript"},"guidelines")," described in the repository and throughout this tutorial."),(0,o.kt)("p",null,"It is a purely computational library developed to run computationally expensive code on the client-side without any dependencies."),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:i,alt:"hydrolang-architecture",width:"600"})),(0,o.kt)("h2",{id:"open-source-nature"},"Open-source Nature"),(0,o.kt)("p",null,"The code has been developed considering an open-source, open-ended ontology in which the user can modify the framework based on the end-use case required. This means that the user is able to port different type of coding structures into the engine following the ",(0,o.kt)("strong",{parentName:"p"},"guidelines")," described in the repository and throughout this tutorial."))}h.isMDXComponent=!0}}]);